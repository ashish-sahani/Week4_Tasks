#include <iostream>
#include <vector>
#include <algorithm>
#include <cstdlib>
#include <ctime>

using namespace std;

// Control structure to represent a control with unique ID, type, and state
struct Control {
    int id;               // Unique ID
    string type;          // "button" or "slider"
    string state;         // "visible", "invisible", "disabled"
};

int main() {
    // Initialize a vector of controls with various types and states
    vector<Control> controls = {
        {1, "button", "visible"},
        {2, "slider", "invisible"},
        {3, "button", "disabled"},
        {4, "slider", "visible"},
        {5, "slider", "invisible"}
    };

    // 1. Create a backup of the control list
    vector<Control> controlsBackup = controls;

    // 2. Use std::fill to set all states to "disabled"
    fill(controls.begin(), controls.end(), Control{0, "", "disabled"});
    cout << "After filling with 'disabled':\n";
    for (const auto& ctrl : controls) {
        cout << ctrl.state << " ";
    }
    cout << endl;

    // 3. Use std::generate to generate random states for each control
    srand(time(0)); // seed for randomness
    generate(controls.begin(), controls.end(), []() {
        int randState = rand() % 3;
        if (randState == 0) return Control{0, "", "visible"};
        if (randState == 1) return Control{0, "", "invisible"};
        return Control{0, "", "disabled"};
    });
    cout << "After generating random states:\n";
    for (const auto& ctrl : controls) {
        cout << ctrl.state << " ";
    }
    cout << endl;

    // 4. Use std::transform to change all sliders to "invisible"
    transform(controls.begin(), controls.end(), controls.begin(), [](Control& ctrl) {
        if (ctrl.type == "slider") ctrl.state = "invisible";
        return ctrl;
    });
    cout << "After transforming sliders to invisible:\n";
    for (const auto& ctrl : controls) {
        cout << ctrl.state << " ";
    }
    cout << endl;

    // 5. Use std::replace_if to replace "disabled" state with "enabled"
    replace_if(controls.begin(), controls.end(), [](const Control& ctrl) { return ctrl.state == "disabled"; }, Control{0, "", "enabled"});
    cout << "After replacing 'disabled' with 'enabled':\n";
    for (const auto& ctrl : controls) {
        cout << ctrl.state << " ";
    }
    cout << endl;

    return 0;
}
