#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Control structure to represent a control with unique ID, type, and state
struct Control {
    int id;               // Unique ID
    string type;          // "button" or "slider"
    string state;         // "visible", "invisible", or "disabled"

    // Define the < operator to compare by 'id'
    bool operator<(const Control& other) const {
        return id < other.id;
    }
};

int main() {
    // Initialize a vector of controls with different IDs, types, and states
    vector<Control> controls = {
        {5, "button", "visible"},
        {1, "slider", "disabled"},
        {3, "slider", "visible"},
        {4, "button", "invisible"},
        {2, "slider", "disabled"}
    };

    // 1. Sorting by ID using std::sort
    sort(controls.begin(), controls.end());  // Now sorts by 'id' due to the operator< being defined
    cout << "Sorted controls by ID:\n";
    for (const auto& ctrl : controls) {
        cout << "ID: " << ctrl.id << ", Type: " << ctrl.type << ", State: " << ctrl.state << endl;
    }

    // 2. Merging two sorted lists of controls
    vector<Control> moreControls = {{6, "button", "visible"}, {7, "slider", "invisible"}};
    
    // Sort moreControls by ID to ensure that both lists are sorted before merging
    sort(moreControls.begin(), moreControls.end()); // Now sorts by 'id' due to the operator< being defined

    vector<Control> mergedControls;

    // Merge the two sorted lists into a single list
    merge(controls.begin(), controls.end(), moreControls.begin(), moreControls.end(), back_inserter(mergedControls));

    cout << "\nMerged controls:\n";
    for (const auto& ctrl : mergedControls) {
        cout << "ID: " << ctrl.id << ", Type: " << ctrl.type << ", State: " << ctrl.state << endl;
    }

    return 0;
}
